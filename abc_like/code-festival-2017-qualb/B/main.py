#!/usr/bin/env python3
import sys

from collections import defaultdict

YES = "YES"  # type: str
NO = "NO"  # type: str


def solve(N: int, D: "List[int]", M: int, T: "List[int]"):
    d = defaultdict(int)
    t = defaultdict(int)
    for i in range(N):
        d[D[i]] += 1

    for i in range(M):
        t[T[i]] += 1

    for k in t.keys():
        if t[k] > d[k]:
            print(NO)
            return

    print(YES)


    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    D = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    M = int(next(tokens))  # type: int
    T = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    solve(N, D, M, T)

if __name__ == '__main__':
    main()
