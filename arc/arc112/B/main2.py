#!/usr/bin/env python3
import sys


def solve(B: int, C: int):
    if C == 0:
        print(1)
        return 0


    if B == 0:
        ans = 0
        n = C // 2
        ans += (2 * n)
        if C % 2 == 1:
            ans +=  1
        print(ans)
        return 0


    ans = 1
    if B > 0:
        n = C // 2
        print('n', n)
        print('C', C)

        # 初手反転する場合の操作回数
        m = (C - 1 ) // 2
        print('m', m)
        NB = B * -1

        a = B - n
        b = a * -1

        c = NB - m
        d = c * -1
        print(a, b, c, d)
        if C % 2 == 1:
            d = (c+1) * -1
        else:
            b = (a-1) * -1
        print(a, b, c, d)

        ans += (2 * n)
        if C % 2 == 1 and (B - n) != 0:
            ans +=  1

        if a < 0 <= B:
            print('a', max(abs(min(max(a, NB), B)), 1))
            ans -= max(abs(min(max(a, NB), B)), 1)


        print(ans)
        e = max(B, b)
        if d > e:
            ans += (d - e)
            print(d - e)

        f = min(NB,min(a, b))
        if c < f:
            ans += abs(c - f)
            print(abs(c -f))
        # print(ans)



    #
    # else:
    #
    # # -1 できる回数
    # n = C // 2
    # print('n', n)
    #
    # D = B - n

    # ans += (2 * n)
    # if C % 2 == 1 and D != 0:
    #     ans +=  1
    #
    # if D < 0 <= B:
    #     print('d', max(min(max(D, -B), B), 1))
    #     ans -= max(abs(min(max(D, -B), B)), 1)
    #
    # X = B
    # Y = C
    # if X >= 0:
    #     X *= -1
    #     Y -= 1
    # m = Y // 2
    # Z = X - m
    # V = min(X, D)
    # W = Z - V
    # ans += (2 * W)
    # if Y % 2 == 1:
    #     ans +=  1
    #
    #
    # E = D * -1
    #
    # if C % 2 == 1:
    #     ans += 1
    #
    # r = 0
    # # * -1 しても増えない範囲
    # if B >= 0 and (B - n) < 0:
    #     r = B+1
    #     print(r)
    # ans += (n - r)
    print(ans)


    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    B = int(next(tokens))  # type: int
    C = int(next(tokens))  # type: int
    solve(B, C)

if __name__ == '__main__':
    main()
