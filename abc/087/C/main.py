#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[List[int]]"):
    if N == 1:
        print(A[0][0] + A[1][0])
        return
    for i in range(1,N):
        A[0][i] += A[0][i-1]

    A[1][0] += A[0][0]
    for i in range(1, N):
        p = A[1][i] + A[0][i]
        q = A[1][i] + A[1][i-1]
        A[1][i] = max(p, q)
    print(A[1][N-1])

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(N)] for _ in range(2)]  # type: "List[List[int]]"
    solve(N, A)

if __name__ == '__main__':
    main()
