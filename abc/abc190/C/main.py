#!/usr/bin/env python3
import sys
import itertools

def flatten_list_tuple(l):
    for el in l:
        if isinstance(el, (list, tuple)):
            yield from flatten_list_tuple(el)
        else:
            yield el


def solve(N: int, M: int, A: "List[int]", B: "List[int]", K: int, C: "List[int]", D: "List[int]"):
    t = [C[0], D[0]]
    for i in range(1, K):
        t = list(itertools.product(t, [C[i], D[i]]))

    ans = 0
    for p in t:
        at = 0
        t = set(list(flatten_list_tuple([p])))
        for i in range(M):
            if A[i] in t and B[i] in t:
                at += 1
        ans = max(ans, at)
    print(ans)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    K = int(next(tokens))  # type: int
    C = [int()] * (K)  # type: "List[int]"
    D = [int()] * (K)  # type: "List[int]"
    for i in range(K):
        C[i] = int(next(tokens))
        D[i] = int(next(tokens))
    solve(N, M, A, B, K, C, D)

if __name__ == '__main__':
    main()
