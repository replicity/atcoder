#!/usr/bin/env python3
import sys
import math


def solve(A: int, B: int, C: int, D: int, E: int):
    li = [A, B, C, D, E]
    lastIndex = 0
    t = A % 10
    for i in range(1, 5):
        if li[i] % 10 < t and li[i] % 10 != 0:
            lastIndex = i

    ans = 0
    for i in range(5):
        if i != lastIndex:
            ans += math.ceil(li[i] / 10) * 10
        else:
            ans += li[i]
    print(ans)



    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    C = int(next(tokens))  # type: int
    D = int(next(tokens))  # type: int
    E = int(next(tokens))  # type: int
    solve(A, B, C, D, E)

if __name__ == '__main__':
    main()
