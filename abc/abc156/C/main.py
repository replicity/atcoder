#!/usr/bin/env python3
import sys
import math


def solve(N: int, X: "List[int]"):
    t = sum(X)
    c1 = math.ceil(t/N)
    c2 = math.floor(t/N)
    ans1 = sum(map(lambda x: (x -c1)** 2, X))
    ans2 = sum(map(lambda x: (x -c2)** 2, X))
    print(min(ans1, ans2))

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X)

if __name__ == '__main__':
    main()
