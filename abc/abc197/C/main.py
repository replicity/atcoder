#!/usr/bin/env python3
import sys
import itertools

l = []

def part_int_sub(n, k, a):
    if n == 0:
        l.append(a)
    elif n == 1:
        l.append(a + [1])
    elif k == 1:
        l.append(a + [1] * n)
    else:
        if n >= k:
           part_int_sub(n - k, k, a + [k])
        part_int_sub(n, k - 1, a)

def partition_of_int(n):
    part_int_sub(n, n, [])

def solve(N: int, A: "List[int]"):
    partition_of_int(N)

    ans = float('inf')
    f = False
    for i in l:
        for v in itertools.permutations(i, len(i)):
            if len(v) == N:
                if f:
                    continue
                f = True
            # print(v)
            a = A.copy()
            tmp = -1
            for j in v:
                t = a[:j]
                tt = 0
                for k in t:
                    tt |= k
                a = a[j:]
                if tmp == -1:
                    tmp = tt
                else:
                    tmp ^= tt
                # print(tmp)
            ans = min(ans, tmp)

            if ans == 0:
                print(ans)
                return
    print(ans)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
