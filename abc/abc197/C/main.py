#!/usr/bin/env python3
import sys
from functools import reduce

def solve(N: int, A: "List[int]"):
    r = 2 ** (N -1)
    f = "{:0"  +str(N-1) +"b}"

    ans = float('inf')
    for i in range(r):
        m = f.format(i)
        ol = []
        xl = []
        for j in range(len(m)):
            # or
            if m[j] == "0":
                ol.append(A[j])
                continue
            # xor
            xl.append(reduce(lambda x, y: x | y, ol, A[j]))
            ol = []

        xl.append(reduce(lambda x, y: x | y, ol, A[-1]))
        s = reduce(lambda x, y: x ^ y, xl[1:], xl[0])
        ans = min(ans, s)
    print(ans)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
