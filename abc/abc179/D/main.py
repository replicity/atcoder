#!/usr/bin/env python
import sys

MOD = 998244353  # type: int


# すべてのマスに対してK個の区間の値を使ってdpを求めていく
# 区間は重複しないことを使って、区間ごとの値は累積和を使って求めることで高速化できる
def solve(N: int, K: int, L: "List[int]", R: "List[int]"):
    dp = [0] * N
    sdp = [0] * (N + 1)
    dp[0] = 1
    sdp[1] = 1

    for i in range(1, N):
        for j in range(K):
            l = max(0, i - R[j])
            r = max(0, i - L[j]+1)
            dp[i] += sdp[r] - sdp[l]
            dp[i] %= MOD
        sdp[i+1] = sdp[i] + dp[i]
        sdp[i+1] %= MOD
    print(dp[N-1]%MOD)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    L = [int()] * (K)  # type: "List[int]"
    R = [int()] * (K)  # type: "List[int]"
    for i in range(K):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, K, L, R)

if __name__ == '__main__':
    main()
