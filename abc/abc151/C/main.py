#!/usr/bin/env python3
import sys


def solve(N: int, M: int, p: "List[int]", S: "List[str]"):
    ac_count = 0
    wa_count = 0
    l = [0] * (N+1)
    flg = [0] * (N+1)
    for i in range(M):
        if S[i] == "WA":
            if flg[p[i]-1] == 0:
                l[p[i]-1] += 1
        elif S[i] == "AC":
            if flg[p[i]-1] == 0:
                ac_count += 1
                wa_count += l[p[i]-1]
                flg[p[i]-1] = 1
    print(f"{ac_count} {wa_count}")

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    p = [int()] * (M)  # type: "List[int]"
    S = [str()] * (M)  # type: "List[str]"
    for i in range(M):
        p[i] = int(next(tokens))
        S[i] = next(tokens)
    solve(N, M, p, S)

if __name__ == '__main__':
    main()
