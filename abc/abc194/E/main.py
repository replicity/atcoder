#!/usr/bin/env python3
import sys
from collections import defaultdict


def solve(N: int, M: int, A: "List[int]"):
    ans = N+1
    nums = defaultdict(int)
    for i in range(0, N-M):
        if i == 0:
            t = A[i:i+M]
            if min(t) != 0:
                print(0)
                return
            t = list(sorted(t))
            f = True
            nums[t[0]] += 1
            for j in range(1, len(t)):
                nums[t[j]] += 1
                if t[j] - t[j-1] != 1 and t[j] != t[j-1]:
                    ans = t[j-1] + 1
                    f = False
                    break
            if f:
                ans = max(t) + 1
            # print(ans)
        else:
            # print(A[i-1], A[i+M])
            if ans > A[i-1] and A[i-1] != A[i+M] and nums[A[i-1]] == 1:
                ans = A[i-1]
            nums[A[i-1]] -= 1
            nums[A[i+M]] += 1
    print(ans)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
