#!/usr/bin/env python3
import sys
import math

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, X: "List[int]", Y: "List[int]"):
    for i in range(N):
        ax = X[i]
        ay = Y[i]
        for j in range(i+1, N):
            bx = X[j]
            by = Y[j]
            for k in range(j+1, N):
                cx = X[k]
                cy = Y[k]
                # 傾きを求める下記の式から割り算をなくす
                # abt = (by - ay) / (bx - ax)
                # act = (cy - ay) / (cx - ax)
                tbx = bx - ax
                tcx = cx - ax
                tby = by - ay
                tcy = cy - ay
                if tby * tcx ==  tcy * tbx:
                    print('Yes')
                    return

    print('No')
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, x, y)

if __name__ == '__main__':
    main()
