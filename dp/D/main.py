#!/usr/bin/env python3
import sys

# n番目の荷物までの状態で重さが1~Nの場合でそれぞれの最大の価値を計算する
def solve(N: int, W: int, w: "List[int]", v: "List[int]"):
    dp = [[0] * (W + 1) for i in range(N+1)]

    # 何番目の荷物か
    for i in range(1, N+1):
        # 重さ
        weight = w[i-1]
        value = v[i-1]
        for j in range(W+1):
            if j < weight:
                dp[i][j] = dp[i-1][j]
            elif dp[i-1][j] <  dp[i-1][max(0, (j - weight))] + value:
                dp[i][j] = dp[i-1][max(0, (j - weight))] + value
            else:
                dp[i][j] = dp[i-1][j]

    # for idp in dp:
    #     print(idp)

    print(dp[N][W])
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    w = [int()] * (N)  # type: "List[int]"
    v = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        w[i] = int(next(tokens))
        v[i] = int(next(tokens))
    solve(N, W, w, v)

if __name__ == '__main__':
    main()
